---
title: "Documentation"
bibliography: references.bib
---

# Realising FAIR: Data Documentation

## Documentation tools

Documentation is vital to making your work understandable, which is, in turn, necessary for your work to be reusable. Documentation is important not only for data, but for your projects in general, including the code you write. Your documentation should provide context for your project and its data and should, for example, provide information about the data collection, structure, and ownership.

In the next video we will talk about different methods and tools you can use to document projects, datasets, and code. We will also briefly talk about metadata.

-   [04-2_Module-4_Video_Presentation_DataDocumentation](https://surfdrive.surf.nl/files/index.php/s/Y1ylaZYL1R3VPbR) (*12 minutes*, audio will play automatically in full presentation mode)
-   [Read more about README files](https://estherplomp.github.io/TNW-OS-support/posts/readme/)
    -   [Cornell template for a ReadMe file](https://cornell.app.box.com/v/ReadmeTemplate).
-   Data Dictionaries for tabular data (Watch a [video on data dictionaries](https://www.youtube.com/watch?v=Fe3i9qyqPjo))
-   [Create a package for your data with Frictionless Data](https://create.frictionlessdata.io)

## (Electronic) Lab Notebooks

Some labs make use of [Electronic Lab Notebooks](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-elns) to manage data. Ideally everyone is using the same solution.

[Labfolder](https://labfolder.mpdl.mpg.de/home/) is available to Max Planck researchers.

The Turing Way presents an [overview of some of resources that are available](https://the-turing-way.netlify.app/reproducible-research/rdm/rdm-elns#resources-for-choosing-elns) to help you make a choice, or you can use the [ELN finder](https://eln-finder.ulb.tu-darmstadt.de/home).

There are also electronic notes such as:

-   OneNote
-   [Obsidian](https://obsidian.md/) (or [logseq](https://logseq.com/))

## Paper Lab Notebooks

In case you prefer to stick to paper, here are some organisation tips:

-   State the name of the researcher and period of use on the cover of the notebook
-   Number all pages consecutively
-   All entries should be written with permanent ink (no pencils)
-   Standard language should be English
-   Each record requires a date
-   Make sure that it is possible to separate the different experiments recorded (use meaningful titles)
-   Add a note where the raw data linked to the experiment will be stored and the name of the corresponding data file
-   Do not keep loose pages in your notebook. Fix to the notebook any relevant piece of paper and/or picture in a proper way

Make sure you scan/digitise your paper notebook so that you have a back up copy!

## Software/code documentation

-   See the [example used in the presentation using JupyterLab](https://mybinder.org/v2/gh/jupyterlab/jupyterlab-demo/master?urlpath=lab/tree/demo)
-   [Template to set up a GitHub (or GitLab) repository with all the relevant documentation about the project](https://github.com/manuGil/fair-code)
-   [Code Refinery materials on Code Documentation](https://coderefinery.github.io/documentation/)
-   Use the [CodeMeta creator](https://codemeta.github.io/codemeta-generator/) to create a .json metadata file to add to your repo
-   Barbara Vreede's presentation on [Best Practices for Writing Reproducible Code](https://bvreede.github.io/presentations/presentations/2020-09-17_BestPractices-lecture.html#1)
-   [Jupyter Notebooks](https://github.com/jupyter/jupyter/wiki)
-   [Aim For Understandability If You Want To Write Good Research Software](https://www.software.ac.uk/blog/2022-07-04-aim-understandability-if-you-want-write-good-research-software)
-   For Julia you can use [DrWatson](https://juliadynamics.github.io/DrWatson.jl/dev/) to create consistent folder structures. Particularly useful for simulation data.

## References
